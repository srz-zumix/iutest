version: 1.0.{build}

environment:
  matrix:
    # Visual Studio
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PROJECT_DIR: vs2013
      CMAKE_GENERATOR_NAME: Visual Studio 12 2013
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      PROJECT_DIR: vs2015
      CMAKE_GENERATOR_NAME: Visual Studio 14 2015
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      PROJECT_DIR: vs2017
      CMAKE_GENERATOR_NAME: Visual Studio 15 2017
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PROJECT_DIR: vs2019
      CMAKE_GENERATOR_NAME: Visual Studio 16 2019
    # Cygwin
    - BUILD_CYGWIN: yes
      USE_GNU_EXTENSION: 0
    - BUILD_CYGWIN: yes
      USE_GNU_EXTENSION: 1
    # MINGW/MINGW64
    - BUILD_MINGW: yes
      USE_GNU_EXTENSION: 0
    # MINGW/MINGW64 GNU EXTENSION
    - BUILD_MINGW: yes
      USE_GNU_EXTENSION: 1
    # NMAKE
    - BUILD_NMAKE: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    # Prefast
    - BUILD_PREFAST: yes
      PROJECT_DIR: vs2015
    # Menu
    - BUILD_MENU: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    # Package Build
    - BUILD_PACKAGE: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    # Nuget
    - BUILD_NUGET: yes

configuration:
  - Debug
  - Release
platform:
  - Win32
  - x64

matrix:
  exclude:
    - configuration: Debug
      BUILD_CYGWIN: yes
    - configuration: Debug
      BUILD_MINGW: yes
    - configuration: Debug
      BUILD_NMAKE: yes
    - configuration: Release
      BUILD_PREFAST: yes
    - configuration: Debug
      BUILD_MENU: yes
    - configuration: Debug
      BUILD_PACKAGE: yes
    - configuration: Debug
      BUILD_NUGET: yes
    # exclude x64
    - platform: x64
      BUILD_NMAKE: yes
    - platform: x64
      BUILD_PREFAST: yes
    - platform: x64
      BUILD_PACKAGE: yes
    - platform: x64
      BUILD_NUGET: yes

branches:
  only:
    - master
    - develop
    - /appveyor.*/

skip_commits:
  files:
    - .circleci/
    - .github/
    - .semaphore/
    - "*.md"
    - docs/
    - Jenkinsfile
    - LICENSE
    - .bandit
    - .editorconfig
    - .hadolint.yaml
    - .lgtm.yaml
    - tox.ini
    - azure-pipelines.yml
    - bitrise.yml
    - buddy.yml
    - .circleci/*
    - .cirrus.yml
    - .scrutinizer.yml
    - codecov.yml
    - codefresh.yml
    - codeship-services.yml
    - codeship-steps.yml
    - .drone.yml
    - .github/*
    - .razorops.yaml
    - .semaphore/*
    - shippable.yml
    - sider.yml
    - .travis.yml
    - wercker.yml

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

clone_depth: 1

init:
  # RDP setup
  ps: |
    $commit_message = $env:APPVEYOR_REPO_COMMIT_MESSAGE
    if($commit_message.Contains("[appveyor rdp]")) {
        iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
        Set-WinSystemLocale ja-JP
        Set-Location -Path hklm:\SYSTEM\CurrentControlSet\Control
        New-ItemProperty -Path ".\Keyboard Layout" -Name IgnoreRemoteKeyboardLayout -PropertyType DWORD -Value 1 -Force
        Restart-Computer
    }

before_build:
  cmd: |
      mkdir build && cd build
      cmake ../projects/cmake -G "%CMAKE_GENERATOR_NAME%" -A %PLATFORM% -Dbuild_gtest_samples=ON
      cd ..

build:
  project: build\iutest.sln
  parallel: true
  verbosity: minimal

test_script:
  cmd: cd build && ctest -C %Configuration% -V

on_failure:
  # wait RDP connect
  ps: |
    $commit_message = $env:APPVEYOR_REPO_COMMIT_MESSAGE
    if($commit_message.Contains("[appveyor rdp]")) {
      $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    }

for:
# Build .sln (no cmake)
-
  matrix:
    only:
      - BUILD_PRE_PROJECT: yes
  before_build:
    cmd: cmake --version
  build:
    project: projects\%PROJECT_DIR%\iutest.sln
    parallel: true
    verbosity: minimal
  test_script:
    cd projects\%PROJECT_DIR%\%Configuration%
    iutest_sample.exe
    iutest_sample.exe --spec
# Cygwin
-
  matrix:
    only:
      - BUILD_CYGWIN: yes
  init:
    ps: |
      if($env:PLATFORM -eq "Win32"){
        $env:CYGWIN_PATH="C:\cygwin"
        $env:CYGWIN_SETUP_EXE="setup-x86.exe"
      } else {
        $env:CYGWIN_PATH="C:\cygwin64"
        $env:CYGWIN_SETUP_EXE="setup-x86_64.exe"
      }
      $env:PATH=$env:CYGWIN_PATH + "\bin;" + $env:PATH
  install:
    cmd: |
      %CYGWIN_PATH%\%CYGWIN_SETUP_EXE% -qnNdO -R %CYGWIN_PATH% -s http://cygwin.mirror.constant.com -l %CYGWIN_PATH%/var/cache/setup -P make -P clang
  before_build: &noop
    cmd: echo.
  build_script:
    cmd: |
      cd test
      make showcxxmacros
      make -j4
  test_script:
    cmd: make test && make report
# MINGW
-
  matrix:
    only:
      - BUILD_MINGW: yes
  install:
    ps: |
      if($env:PLATFORM -eq "Win32"){
        $env:MAKE_OPTIONS="LIBS=ws2_32"
        $env:MINGW_PATH="C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin"
      } else {
        $env:MINGW_PATH="C:\mingw\bin"
      }
      $env:PATH=$env:MINGW_PATH + ";" + $env:PATH
  before_build: *noop
  build_script:
    cmd: |
      cd test
      mingw32-make showcxxmacros
      mingw32-make -j4 %MAKE_OPTIONS%
  test_script:
    cmd: mingw32-make test %MAKE_OPTIONS% && mingw32-make report
# NAMKE
-
  matrix:
    only:
      - BUILD_NMAKE: yes
  before_build:
    cmd: '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\vsdevcmd.bat"'
  build_script:
    cmd: cd test && nmake minimum_tests && minimum_tests.exe --spec
  test_script:
    cmd: nmake test
# Prefast
-
  matrix:
    only:
      - BUILD_PREFAST: yes
  environment:
    MSBUILD_LOGGER_OPTION: /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
    MSBUILD_PREFAST_OPTION: /p:RunCodeAnalysis=true /p:EnablePREfast=true /p:CodeAnalysisTreatWarningsAsErrors=true
  before_build: *noop
  build_script:
    cmd: msbuild "projects\%PROJECT_DIR%\iutest_sample.vcxproj" /m %MSBUILD_LOGGER_OPTION% %MSBUILD_PREFAST_OPTION%
  test: off
# Menu
-
  matrix:
    only:
      - BUILD_MENU: yes
  before_build: *noop
  build:
    project: samples\windows\iutest_windows_sample.sln
    parallel: true
    verbosity: minimal
  test: off
# Package Build
-
  matrix:
    only:
      - BUILD_PACKAGE: yes
  before_build: *noop
  build_script:
    sh: bash ./.ci/make-package.sh
  test: off
# NuGet
-
  matrix:
    only:
      - BUILD_NUGET: yes
  before_build: *noop
  build_script:
    ps: |
      $nuspecPath = "projects\nuget\iutest.nuspec"
      Write-Output "Building NuGet package"
      nuget pack $nuspecPath -OutputDirectory ".\"
  test: off
