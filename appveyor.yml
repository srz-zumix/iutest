version: 1.0.{build}

environment:
  matrix:
    # Visual Studio
    - job_group: VisualStudio
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PROJECT_DIR: vs2013
      CMAKE_GENERATOR_NAME: Visual Studio 12 2013
    - job_group: VisualStudio
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      PROJECT_DIR: vs2015
      CMAKE_GENERATOR_NAME: Visual Studio 14 2015
    - job_group: VisualStudio
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      PROJECT_DIR: vs2017
      CMAKE_GENERATOR_NAME: Visual Studio 15 2017
    - job_group: VisualStudio
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PROJECT_DIR: vs2019
      CMAKE_GENERATOR_NAME: Visual Studio 16 2019
    - job_group: VisualStudio
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
      PROJECT_DIR: vs2022
      CMAKE_GENERATOR_NAME: Visual Studio 17 2022
    # Cygwin
    - job_group: Cygwin
      job_depends_on: VisualStudio
      BUILD_CYGWIN: yes
      USE_GNU_EXTENSION: 0
      OUTPUTXML_TYPE: junit
    - job_group: Cygwin
      job_depends_on: VisualStudio
      BUILD_CYGWIN: yes
      USE_GNU_EXTENSION: 1
      OUTPUTXML_TYPE: xml
    # MINGW/MINGW64
    - job_group: MINGW
      job_depends_on: VisualStudio
      BUILD_MINGW: yes
      USE_GNU_EXTENSION: 0
      OUTPUTXML_TYPE: xml
    # MINGW/MINGW64 GNU EXTENSION
    - job_group: MINGW
      job_depends_on: VisualStudio
      BUILD_MINGW: yes
      OUTPUTXML_TYPE: junit
      USE_GNU_EXTENSION: 1
    # NMAKE
    - job_group: VisualStudio
      job_depends_on: VS2017
      BUILD_NMAKE: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      OUTPUTXML_TYPE: xml
    # Prefast
    - job_group: VisualStudio
      job_depends_on: VS2022
      BUILD_PREFAST: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
      PROJECT_DIR: vs2022
    # Menu
    - job_group: VisualStudio
      BUILD_MENU: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    # Package Build
    - job_group: Package
      job_depends_on: VisualStudio
      BUILD_PACKAGE: yes
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    # Nuget
    - job_group: Package
      job_depends_on: VisualStudio
      BUILD_NUGET: yes

configuration:
  - Debug
  - Release
platform:
  - Win32
  - x64

matrix:
  # the first failed job cancels other jobs and fails entire build
  fast_finish: true
  exclude:
    - configuration: Debug
      BUILD_CYGWIN: yes
    - configuration: Debug
      BUILD_MINGW: yes
    - configuration: Debug
      BUILD_NMAKE: yes
    - configuration: Release
      BUILD_PREFAST: yes
    - configuration: Debug
      BUILD_MENU: yes
    - configuration: Debug
      BUILD_PACKAGE: yes
    - configuration: Debug
      BUILD_NUGET: yes
    # exclude x64
    - platform: x64
      BUILD_NMAKE: yes
    - platform: x64
      BUILD_PREFAST: yes
    - platform: x64
      BUILD_PACKAGE: yes
    - platform: x64
      BUILD_NUGET: yes

branches:
  only:
    - master
    - develop
    - /appveyor.*/

skip_commits:
  files:
    - .circleci/
    - .github/
    - .semaphore/
    - "*.md"
    - docs/
    - Jenkinsfile
    - LICENSE
    - .bandit
    - .editorconfig
    - .hadolint.yaml
    - .lgtm.yaml
    - tox.ini
    - azure-pipelines.yml
    - bitrise.yml
    - buddy.yml
    - .circleci/*
    - .cirrus.yml
    - .scrutinizer.yml
    - codecov.yml
    - codefresh.yml
    - codeship-services.yml
    - codeship-steps.yml
    - .drone.yml
    - .github/*
    - .razorops.yaml
    - .semaphore/*
    - shippable.yml
    - sider.yml
    - .travis.yml
    - wercker.yml

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true
clone_depth: 1

before_build:
  cmd: |
      mkdir build && cd build
      cmake ../projects/cmake -G "%CMAKE_GENERATOR_NAME%" -A %PLATFORM% -Dbuild_gtest_samples=ON
      cd ..

build:
  project: build\iutest.sln
  parallel: true
  verbosity: minimal

test_script:
  cmd: cd build && ctest -C %Configuration% -V -T Test

on_finish:
  ps: |
    try {
      $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      $TestXmlFile = Get-Childitem â€“Path "$($env:APPVEYOR_BUILD_FOLDER)\build" -Include *Test.xml -File -Recurse -ErrorAction SilentlyContinue
      Write-Host $TestXmlFile
      $XSLInputElement.Transform($TestXmlFile, (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))
    } catch {
      Write-Host $_.Exception.Message
    }

# artifacts:
#   - path: "**/*.xml"


for:
# Build .sln (no cmake)
-
  matrix:
    only:
      - BUILD_PRE_PROJECT: yes
  before_build:
    cmd: cmake --version
  build:
    project: projects\%PROJECT_DIR%\iutest.sln
    parallel: true
    verbosity: minimal
  test_script:
    cd projects\%PROJECT_DIR%\%Configuration%
    iutest_sample.exe
    iutest_sample.exe --spec
  on_finish: &noop
    cmd: echo.
# Cygwin
-
  matrix:
    only:
      - BUILD_CYGWIN: yes
  init:
    ps: |
      if($env:PLATFORM -eq "Win32"){
        $env:CYGWIN_PATH="C:\cygwin"
        $env:CYGWIN_SETUP_EXE="setup-x86.exe"
      } else {
        $env:CYGWIN_PATH="C:\cygwin64"
        $env:CYGWIN_SETUP_EXE="setup-x86_64.exe"
      }
      $env:PATH=$env:CYGWIN_PATH + "\bin;" + $env:PATH
  install:
    cmd: |
      curl -sSL -o %CYGWIN_PATH%\%CYGWIN_SETUP_EXE% "https://cygwin.com/%CYGWIN_SETUP_EXE%"
      %CYGWIN_PATH%\%CYGWIN_SETUP_EXE% -qnNdO --allow-unsupported-windows -R %CYGWIN_PATH% -s http://cygwin.mirror.constant.com -l %CYGWIN_PATH%/var/cache/setup -P make -P clang
  before_build: *noop
  build_script:
    cmd: |
      cd test
      make showcxxmacros check_stdlib showstdlbfeatures
      make -j4 OUTPUTXML=%OUTPUTXML_TYPE%
  test_script:
    cmd: make test OUTPUTXML=%OUTPUTXML_TYPE% && make report
  on_finish: &test_result
    ps: |
      $wc = New-Object 'System.Net.WebClient'
      Get-ChildItem "$($env:APPVEYOR_BUILD_FOLDER)\test" -Filter *.xml |
      Foreach-Object {
        $XmlFilePath = $_.FullName
        Write-Host $XmlFilePath
        $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", $XmlFilePath)
      }
#    cmd: |
#        cd %APPVEYOR_BUILD_FOLDER%/test
#        find . -type f -name '*.xml' -print0 | xargs -0 -I '{}' curl -F 'file=@{}' "https://ci.appveyor.com/api/testresults/junit/%APPVEYOR_JOB_ID%"
# MINGW
-
  matrix:
    only:
      - BUILD_MINGW: yes
  install:
    ps: |
      if($env:PLATFORM -eq "Win32"){
        $env:MINGW_PATH="C:\mingw\bin"
      } else {
        $env:MAKE_OPTIONS="LIBS=ws2_32"
        $env:MINGW_PATH="C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin"
      }
      $env:PATH=$env:MINGW_PATH + ";" + $env:PATH
  before_build: *noop
  build_script:
    cmd: |
      cd test
      mingw32-make showcxxversion showcxxmacros check_stdlib showstdlbfeatures
      mingw32-make -j4 %MAKE_OPTIONS% OUTPUTXML=%OUTPUTXML_TYPE%
  test_script:
    cmd: mingw32-make test %MAKE_OPTIONS% OUTPUTXML=%OUTPUTXML_TYPE% && mingw32-make report
  on_finish: *test_result
# NAMKE
-
  matrix:
    only:
      - BUILD_NMAKE: yes
  before_build:
    cmd: |
      "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\vsdevcmd.bat"
      cd test && nmake showcxxmacros check_stdlib showstdlbfeatures
      nmake minimum_tests && minimum_tests.exe --spec
      nmake clean
  build_script:
    cmd: nmake OUTPUTXML=%OUTPUTXML_TYPE%
  test_script:
    cmd: nmake test OUTPUTXML=%OUTPUTXML_TYPE%
  on_finish: *test_result
# Prefast
-
  matrix:
    only:
      - BUILD_PREFAST: yes
  environment:
    MSBUILD_LOGGER_OPTION: /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
    MSBUILD_PREFAST_OPTION: /p:RunCodeAnalysis=true /p:EnablePREfast=true /p:CodeAnalysisTreatWarningsAsErrors=true
    CPPCORE_CHECK_OPTION: /p:CodeAnalysisRuleSet=CppCoreCheckRules.ruleset
  before_build: *noop
  build_script:
    cmd: msbuild "projects\%PROJECT_DIR%\iutest_sample.vcxproj" /m %MSBUILD_LOGGER_OPTION% %MSBUILD_PREFAST_OPTION% %CPPCORE_CHECK_OPTION% /p:ForceImportBeforeCppTargets=%APPVEYOR_BUILD_FOLDER%/utils/props/CppCoreCheckDisableSpecificWarnings.props
  test: off
  on_finish: *noop
# Menu
-
  matrix:
    only:
      - BUILD_MENU: yes
  before_build: *noop
  build:
    project: samples\windows\iutest_windows_sample.sln
    parallel: true
    verbosity: minimal
  test: off
  on_finish: *noop
# Package Build
-
  matrix:
    only:
      - BUILD_PACKAGE: yes
  before_build: *noop
  build_script:
    sh: bash ./.ci/make-package.sh
  test: off
  on_finish: *noop
# NuGet
-
  matrix:
    only:
      - BUILD_NUGET: yes
  before_build: *noop
  build_script:
    ps: |
      $nuspecPath = "projects\nuget\iutest.nuspec"
      Write-Output "Building NuGet package"
      nuget pack $nuspecPath -OutputDirectory ".\"
  test: off
  on_finish: *noop
