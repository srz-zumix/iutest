dist: bionic

language: cpp

compiler:
  - clang
  - gcc

branches:
  only:
    - master
    - develop
    # - /feature.*/
    # - /fix.*/
    # - /travisci.*/
    # - /travis-ci.*/

addons:
  apt: &apt-global
    sources: &apt-common-sources
      - sourceline: 'ppa:ubuntu-toolchain-r/test'
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main'
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
    packages: &apt-common-packages
      - clang-8
      - g++-9
      - gcc-9
      - gdb
      #- cppcheck
    config:
      retries: true

before_install:
  # コアダンプ出力のセットアップ
  - |
    if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then
      ulimit -c unlimited
      sudo bash -c 'echo "core_x_%e" > /proc/sys/kernel/core_pattern'
    fi
  - python .ci/travisci/travis_blocking_stdout.py || true
  #- apt-cache search clang || true
  #- apt-cache search gcc || true
  # compiler predefined specific
  - if [[ "${COMPILER_CC}" != "" ]]; then export CC=${COMPILER_CC}; fi
  - if [[ "${COMPILER_CXX}" != "" ]]; then export CXX=${COMPILER_CXX}; fi
  # g++
  - |
    if [ "${CXX}" = 'g++' ] && [ "${HOST}" != 'WINE' ] && [ "${USE_COVERAGE}" = '' ]; then
      export CC=gcc-9
      export CXX=g++-9
      export CCOV=gcov-9
      export AR=gcc-ar-9
      export RANLIB=gcc-ranlib-9
      #update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-8  90
      #update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-8  90
      #update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-8 90
    fi
  # clang
  - |
    if [ "${CXX}" = 'clang++' ] && [ "${TRAVIS_OS_NAME}" != 'osx' ] && [ "${USE_COVERAGE}" = '' ]; then
      export CC=clang-8
      export CXX=clang++-8
      #update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-8   90
      #update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 90
    fi

install:
  # gcov/lcov
  - |
    if [ "${USE_COVERALLS}" = '1' ]; then
      if [ "${USE_COVERAGE}" = 'gcov' ]; then easy_install cpp-coveralls; fi
      if [ "${USE_COVERAGE}" = 'lcov' ]; then
        gem install specific_install && gem specific_install -l 'git://github.com/pcolby/lcoveralls.git'
        # gem install lcoveralls;
      fi
    fi
  # gtest/gmock
  - if [ "${USE_GTEST}" = '1' ] || [ "${USE_GMOCK}" = '1' ]; then . .ci/travisci/install-gtest.sh; fi
  # gmock
  - if [ "${USE_GMOCK}" = '1' ]; then . .ci/travisci/install-gmock.sh; fi

script:
  - |
    if [ "${USE_LIB}" = '1' ]; then
      cd projects/make && make && cd -
    fi
  - |
    if [ "${USE_CMAKE}" = '1' ]; then
      mkdir ./cmake-build &&
      cd ./cmake-build &&
      cmake ../projects/cmake &&
      cmake --build . &&
      ctest -C Debug -V &&
      cd ..
    fi
  - cd ./test
  - |
    if [ "${COVERITY_SCAN}" != '1' ] && [ "${USE_CMAKE}" != '1' ]; then
      make showcxxversion &&
      make -j4 ${USE_FUSED} default &&
      make test ${USE_FUSED} &&
      make report
    fi
  - |
    if [ "${COVERITY_SCAN}" = '1' ] && [ -d cov-int ]; then
      cat cov-int/build-log.txt || true
      cat cov-int/scm_log.txt || true
      ls cov-int
    fi
  # Coverage
  - if [ "${USE_COVERALLS}" = '1' ]; then make send-coveralls; fi
  - if [ "${USE_CODECOV}" = '1' ]; then make send-codecov; fi
  #- if [ "${CPPCHECK}" = '1' ]; then
  #    cppcheck --version;
  #    cppcheck samples --enable=all -f -j 4 --suppress=syntaxError -i samples/gmock -i samples/gtest -i samples/vcunittest -i samples/windows -UGTEST_HIDE_UNREACHABLE_CODE_ -UGTEST_API_ -UGTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ -UGTEST_HAS_STD_TUPLE_ -UGTEST_MESSAGE_AT_ -UGTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ -UGMOCK_INCLUDE_GMOCK_GMOCK_H_ -U__STDC_WANT_SECURE_LIB__ -UIUTEST_USE_GTEST -UIUTEST_DEBUG -UIUTEST_FILE -U__GLIBCXX__;
  #  else
  #    cd ./test; make showcxxversion ${USE_FUSED} all;
  #  fi

after_failure:
    - |
      cd ${TRAVIS_BUILD_DIR}/test
      for f in `find . -maxdepth 1 -name "core_x_*"`; do
        COREFILE=${f}
        EXECFILE=${f##*/core_x_}
        if [ ! -f "${EXECFILE}" ]; then
          EXECFILE=`gdb -c "${COREFILE}" -batch | grep -o -e "\./[A-Za-z_]*"`
        fi
        gdb -c "${COREFILE}" ${EXECFILE} -ex "thread apply all bt" -ex "set pagination 0" -batch
      done

env:
  global:
    # COVERITY_SCAN_TOKEN
    - secure: "R+KDlvwR4+5JbW/Ahm9HHkGHfe3MdU7VPpqxOpbAMc95KFIHLsRcMaJBNCBZMUWXGEjXNsTy6gBR4ZI/XQvTnlYMxabzNbJgMMO6YmI7czXw8yt7zR1+UnVaWE7KEA3d9suZ4jnwIUsIw0AtYZYbCHnDNuOUbpRf+8DrpXsSa/sPqYAvHcvDg4rRtEcLii0lsygcQHNzz0vUivDEiZtBVFlJTo+BkxicVH/Jkv/30KYcFD6Ao9wpJCMC4ysvlTeytTQj0s59PLVkfhYEc3VFQL1BLVGZoesS0BFNY/ZJ8n61Dvu8yNjg/tEMYht0H8278okc59RM2a2MUM5OSs+qC59pGsbsGpm9ScrIoLPi7YzaH6dxpm5iAIcKCVCiOFUdBjqNramfg+X0SMVV1hxPbaQEwQTX9M74QxPj7iue7W9MAYzqrcGJguDZYt/+m/SaM6rzOzI10GY+gNzlyp0aPOQZkp1Mw63NttCatr7Klw2yVP7CE+UuB648AVGrIFgfLAuugSCw3OVCFSnThhXfSjH57v0+3HTivsm3QHLYbTtyHymQOtfG7AB/FgvKF9nxCnDkzP3d5ijNEVWEfL8dF8+QqM8AFZGFHHjXHeopK22myzfuyRVZI8LIbcRAT1MCddmp2hgrRFJRX/Hl29QvGumZtU45xOKJwyKQorxXlfU="
    - IUTEST_REQUIRE_PYTHON: yes

  matrix:
    - STDFLAG=-std=c++98
    - STDFLAG=-std=c++11
    - STDFLAG=

allow_failures:
  - env:
    - COVERITY_SCAN=1
    - USE_LIBCXX=1

matrix:
  include:
    # libc++
    #- compiler: clang
    #  env:
    #    - USE_LIBCXX=1
    #    - STDFLAG=-stdlib=libc++
    #    - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1"
    #  addons:
    #    apt:
    #      sources: *apt-common-sources
    #      packages:
    #        - libc++-dev
    #        - clang-8
    # coverage
    - compiler: gcc
      env: USE_COVERAGE=gcov USE_CODECOV=1 USE_GNU_EXTENSION=1
    - compiler: clang
      env: USE_COVERAGE=lcov USE_COVERALLS=1 USE_GNU_EXTENSION=1 LCOV_GCOV_TOOL=${TRAVIS_BUILD_DIR}/.ci/llvm-gcov.sh
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - clang-8
            - lcov
            - rubygems-integration
    # fused
    - compiler: gcc
      env: USE_FUSED=fused
    - compiler: gcc
      env: USE_FUSED=fused_min STDFLAG=-std=c++98
    # cmake
    - compiler: gcc
      env: USE_CMAKE=1
      addons:
        apt:
          sources: *apt-common-sources
          packages: &apt-cmake-packages
            - *apt-common-packages
            - cmake
    # Google Test
    #- compiler: gcc
    #  env: USE_GTEST=1 USE_GTEST_HEAD=1 USE_GNU_EXTENSION=1
    #  addons:
    #    apt:
    #      sources: *apt-common-sources
    #      packages:
    #        - *apt-cmake-packages
    #        - cmake
    - compiler: gcc
      env: USE_GTEST=1
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-cmake-packages
            - libgtest-dev
    # Google Mock
    - compiler: gcc
      env: USE_GMOCK=1
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - *apt-cmake-packages
            - google-mock
    # MinGW
    # - compiler: gcc
    #   env:
    #     - MINGW=1 HOST=WINE DEFS="-DIUTEST_HAS_STREAM_BUFFER=0"
    #     - COMPILER_CC=i686-w64-mingw32-gcc
    #     - COMPILER_CXX=i686-w64-mingw32-g++
    #   addons:
    #     apt:
    #       sources:
    #         - *apt-common-sources
    #         #- ppa:ubuntu-wine/ppa
    #       packages:
    #         - *apt-common-packages
    #         - wine
    #         - binutils-mingw-w64-i686
    #         - gcc-mingw-w64-i686
    #         - g++-mingw-w64-i686
    # Use Lib
    - compiler: gcc
      env: USE_LIB=1
    # - compiler: clang
    #   env: USE_LIB=1
    # - compiler: gcc
    #   env: CPPCHECK=1
    - os: osx
      env: OSX=1 STDFLAG=-std=c++11
    - os: windows
      env: WINDOWS=1
      script:
        - mkdir ./cmake-build && cd ./cmake-build && cmake ../projects/cmake
        - cmake --build .
        - ctest -C Debug -V
    # CoverityScan
    - compiler: gcc
      env:
        - COVERITY_SCAN=1
        - COMPILER_CC=gcc-7
        - COMPILER_CXX=g++-7
      addons:
        apt:
          sources: *apt-common-sources
          packages:
            - gcc-7
            - g++-7
        coverity_scan:
          project:
            name: "srz-zumix/iutest"
            description: "iutest c++ testing framework"
          notification_email: zumix.cpp@gmail.com
          build_command_prepend: >
            cov-configure --comptype gcc --compiler gcc-7 --template &&
            cd ./test
          build_command: make -j4 coverity_scan STDFLAG=-std=c++17
          branch_pattern: master|.*coverity_scan.*
    # Sanitize
    #- compiler: clang
    #  env:
    #    - STDFLAG=-std=c++11
    #    - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1 -DIUTEST_CHECK_STRICT=0 -DIUTEST_HAS_HDR_CXXABI=0"
    #    - CXXFLAGS="-stdlib=libc++ -fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer"
    #    #- CUSTOM_COMMANDS="clang++-8 -Wall -Wextra -std=c++14 -stdlib=libc++ -g -fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -O1 samples/simple.cpp samples/main.cpp && ./a.out && ./a.out --feature --spec"
    #- compiler: gcc
    #  env:
    #    - STDFLAG=-std=c++11
    #   - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1 -DIUTEST_CHECK_STRICT=0 -DIUTEST_HAS_HDR_CXXABI=0"
    #    - CXXFLAGS="-lasan -fsanitize=address -fno-omit-frame-pointer"

notifications:
  webhooks:
    urls:
      # integromat
      - secure: "L5/slZA7MUx0/3klZxWhnxpNCzaGzhYQtSFvx6t87GEFf6e+L/t1KzVWH8r4Z9DrG5ZnBrDY30MUoFWrKKQgN9UIqSkaQm7T9znxceEuB1T8LV1DJ0cceo60lC/F9PwD2fbLBWM+zn+NzROcpAEgeWLH679EEIqbWFd9TiiWBXxRfxz2mMBzWiRjnJzngke0Uj+Fo/mHQNtLjSjUhsKDub0VK8qT4P+YvlhiLdBeeADEkzghU2FlyB2ds99elA3032KgpTFCHd5yu56bMktw0ioQegUv9YWmlsxvx0N4O/vVGpcSOam3taCf/KO3iEO+PBjDlI7X8AOYbELdHkYWBbSW7G9wXWuSJUQyWjO5LdbB81YqneeD9IXT+CvHMf3+PFkUUps/bgVETM97As0upDxTWA8loTV9eWNaQiUVEyKjbh6QqUjeSP5fmgVEXJu9BJoLk+wEihtMFFaw4IA+7X7kzmgI+RW5p5dAU4f7HpoLKQntvSZTFq5v5iFwNuEfEA6faTBU4nJzxnuUXDwzO5YZPl4zDX0moLMS8BYyZ/u/rH1yZesOrCvq85JhNrZRGJNeJGxPUqNR+GqL+TTtfOxAIie1vYoUqj0U1DZT9smPRe4SsFqQXC0lJrlwQTFCRmI6aCVMvSlOhOkXWTMEkFBhSjZ/wrhFAnixix4OLkA="
