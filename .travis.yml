dist: trusty
sudo: false

language: cpp

compiler:
  - clang
#  - gcc

addons:
  apt: &apt-global
    sources: &apt-common-sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-6.0
      - llvm-toolchain-trusty
    packages: &apt-common-packages
      - clang-6.0
      - libc++-dev
      - g++-8
      - gcc-8
      #- cppcheck

before_install:
  - python .ci/travisci/travis_blocking_stdout.py
  #- apt-cache search clang || true
  #- apt-cache search gcc || true
  # g++
  - |
    if [ "${CXX}" = 'g++' ] && [ "${HOST}" != 'WINE' ] && [ "${USE_COVERAGE}" != 'lcov' ]; then
      export CC=gcc-8
      export CXX=g++-8
      export CCOV=gcov-8
      export AR=AR=gcc-ar-8
      export RANLIB=gcc-ranlib-8 
      #update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-8  90
      #update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-8  90
      #update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-8 90
    fi
  # clang
  - |
    if [ "${CXX}" = 'clang++' ] && [ "${TRAVIS_OS_NAME}" != 'osx' ]; then
      export CCC=clang-6.0;
      export CXX=clang++-6.0;
      #update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-7   90
      #update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 90
    fi
  # mingw
  - if [ "${MINGW}" = '1' ]; then export CXX=i686-w64-mingw32-g++; fi
  # winegcc
  - if [ "${WINEGCC}" = '1' ]; then export CXX=wineg++; fi


install:
  # gcov/lcov
  - |
    if [ "${USE_COVERALLS}" = '1' ]; then
      if [ "${USE_COVERAGE}" = 'gcov' ]; then easy_install cpp-coveralls; fi
      if [ "${USE_COVERAGE}" = 'lcov' ]; then gem install lcoveralls; fi
    fi
  # gtest/gmock
  - |
    if [ "${USE_GTEST}" = '1' ] || [ "${USE_GMOCK}" = '1' ]; then
      if [ "${USE_GTEST_HEAD}" == '1' ]; then
        git clone https://github.com/google/googletest.git googletest
      else
        mkdir googletest
        if [ -e /usr/src/gtest ]; then
          cp -r /usr/src/gtest googletest
        elif [ -e /usr/src/gmock/gtest ]; then
          cp -r /usr/src/gmock/gtest googletest
        else
          exit 1
        fi
        mv googletest/gtest googletest/googletest
      fi
      cd googletest/googletest
      cmake . && cmake --build .
      export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$PWD/include
      export LIBRARY_PATH=$LIBRARY_PATH:$PWD
      cd -
    fi
  # gmock
  - |
    if [ "${USE_GMOCK}" = '1' ]; then
      if [ -e /usr/src/gmock ]; then
        cp -r /usr/src/gmock googletest
        mv googletest/gmock googletest/googlemock
      fi
      if [ -e googletest/googlemock ]; then
        cd googletest/googlemock
        cmake . && cmake --build .
        export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$PWD/include
        export LIBRARY_PATH=$LIBRARY_PATH:$PWD
        cd -
      fi
    fi

script:
  - if [ -n "${CUSTOM_COMMANDS}" ]; then echo "${CUSTOM_COMMANDS}" && eval ${CUSTOM_COMMANDS}; fi
  - if [ "${USE_LIB}" == '1' ]; then cd projects/make && make && cd -; fi
  - if [ "${USE_CMAKE}" == '1' ]; then
      mkdir ./cmake-build && cd ./cmake-build && cmake ../projects/cmake && cmake --build . && ctest -C Debug -V && cd ..;
    fi
  - cd ./test
  - if [ "${COVERITY_SCAN}" != '1' ] && [ "${USE_CMAKE}" != '1' ]; then
      make -j4 showcxxversion ${USE_FUSED} default && make test ${USE_FUSED};
    fi
  - |
    if [ "${COVERITY_SCAN}" == '1' ] && [ -d cov-int ]; then
      cat cov-int/build-log.txt || true;
      cat cov-int/scm_log.txt || true;
      ls cov-int;
    fi
  #- if [ "${CPPCHECK}" = '1' ]; then
  #    cppcheck --version;
  #    cppcheck samples --enable=all -f -j 4 --suppress=syntaxError -i samples/gmock -i samples/gtest -i samples/vcunittest -i samples/windows -UGTEST_HIDE_UNREACHABLE_CODE_ -UGTEST_API_ -UGTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ -UGTEST_HAS_STD_TUPLE_ -UGTEST_MESSAGE_AT_ -UGTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ -UGMOCK_INCLUDE_GMOCK_GMOCK_H_ -U__STDC_WANT_SECURE_LIB__ -UIUTEST_USE_GTEST -UIUTEST_DEBUG -UIUTEST_FILE -U__GLIBCXX__;
  #  else
  #    cd ./test; make showcxxversion ${USE_FUSED} all;
  #  fi

after_success:
  # Coverage
  #- echo ${TRAVIS_JOB_ID}
  - if [ "${USE_COVERALLS}" = '1' ]; then make send-coveralls; fi
  - if [ "${USE_CODECOV}" = '1' ]; then make send-codecov; fi
  
env:
  global:
    # COVERITY_SCAN_TOKEN
    - secure: "TcQxkqb1xHfr1WnVX/CzRyQGOSA29mvLIwn1+lb794Ysq8dNZoHdbcIrKbe/YKR0uRZ5rnL1Onn6L3HyRCJxZg5Grsqrv1dRVSR4X132EoRo0Y8sy/a+c3JFhBJUiaAMds2wG2EFmDCSXNxcUEgzUFEGnTk2vnVKAVBDpOQLlOk="

  matrix:
#    - STDFLAG=-std=c++98
#    - STDFLAG=-std=c++11
    - STDFLAG=

  allow_failures:
    - env: COVERITY_SCAN=1

matrix:
  include:
    # libc++
#   - compiler: clang
#     env:
#       - STDFLAG=-stdlib=libc++
#       - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1"
#   # coverage
#   - compiler: clang
#     env: USE_COVERAGE=gcov USE_CODECOV=1 USE_GNU_EXTENSION=1
#   - compiler: gcc
#     env: USE_COVERAGE=lcov USE_COVERALLS=1 USE_GNU_EXTENSION=1
#     addons:
#       apt:
#         sources: *apt-common-sources
#         packages:
#           - *apt-common-packages
#           - lcov
#           - rubygems-integration
#   # fused
#   - compiler: gcc
#     env: USE_FUSED=fused
#   - compiler: gcc
#     env: USE_FUSED=fused_min STDFLAG=-std=c++98
#   # cmake
#   - compiler: gcc
#     env: USE_CMAKE=1
#     addons:
#       apt:
#         sources: *apt-common-sources
#         packages: &apt-cmake-packages
#           - *apt-common-packages
#           - cmake    
#   # Google Test
#   #- compiler: gcc
#   #  env: USE_GTEST=1 USE_GTEST_HEAD=1 USE_GNU_EXTENSION=1
#   #  addons:
#   #    apt:
#   #      sources: *apt-common-sources
#   #      packages:
#   #        - *apt-cmake-packages
#   #        - cmake
#   - compiler: gcc
#     env: USE_GTEST=1
#     addons:
#       apt:
#         sources: *apt-common-sources
#         packages:
#           - *apt-cmake-packages
#           - libgtest-dev
#   # Google Mock
#   - compiler: gcc
#     env: USE_GMOCK=1
#     addons:
#       apt:
#         sources: *apt-common-sources
#         packages:
#           - *apt-cmake-packages
#           - google-mock
    # Sanitize
    - compiler: clang
      env:
        - STDFLAG=-std=c++11
        - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1 -DIUTEST_CHECK_STRICT=0 -DIUTEST_HAS_HDR_CXXABI=0"
        - CXXFLAGS="-stdlib=libc++ -fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer"
        #- CUSTOM_COMMANDS="clang++-6.0 -Wall -Wextra -std=c++14 -stdlib=libc++ -g -fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -O1 samples/simple.cpp samples/main.cpp && ./a.out && ./a.out --feature --spec"
    - compiler: gcc
      env:
        - STDFLAG=-std=c++11
        - DEFS="-DIUTEST_USE_OWN_IS_MEMBER_FUNCTION_POINTER=1 -DIUTEST_CHECK_STRICT=0 -DIUTEST_HAS_HDR_CXXABI=0"
        - CXXFLAGS="-lasan -fsanitize=address -fno-omit-frame-pointer"
    # MinGW
    # - compiler: gcc
    #   env: MINGW=1 HOST=WINE DEFS="-DIUTEST_HAS_STREAM_BUFFER=0"
    #   addons:
    #     apt:
    #       sources:
    #         - *apt-common-sources
    #         #- ppa:ubuntu-wine/ppa
    #       packages:
    #         - *apt-common-packages
    #         - wine
    #         - binutils-mingw-w64-i686
    #         - gcc-mingw-w64-i686
    #         - g++-mingw-w64-i686
    # Use Lib
#    - compiler: gcc
#      env: USE_LIB=1
    #- compiler: gcc
    #  env: CPPCHECK=1
    #- compiler: gcc
    #  env: COVERITY_SCAN=1
    #  addons:
    #    apt: *apt-global
    #    coverity_scan:
    #      project:
    #        name: "srz-zumix/iutest"
    #        description: "iutest c++ testing framework"
    #      notification_email: zumix.cpp@gmail.com
    #      build_command_prepend: "cov-configure --comptype gcc --compiler gcc-7 --template && cd ./test"
    #      build_command: make coverity_scan STDFLAG=-std=c++1z
    #      branch_pattern: master
    #- os: osx
    #  env: OSX=1 STDFLAG=-std=c++11

#otifications:
# webhooks:
#   urls:
#     - secure: Oxajh80h7/RI6otg8Xd2QkglQU0y8ug+f8GVC/BV9VnS9cFWk10z+/69OOBFGCTN7Qjgp+MwOkrQz4a50bIIlrTQtTnw0SmMKd+qIWVJ55xXnSCqWcGE7cD1Rx5/ZmFaAZ0khTZzHwSjhCN4gexLf/aYmG3AnXLXhqNnxkZ73nY=
#     - secure: T+ZBCfi1TBStN2eXidtV0J5AjQqtNEXIQtytuJWpgAdgCHSD73gJusSzE9nB0k0I28i1fn6meSuGVmGPdH7CUJdjRVUgbsCSGJot6mi2iR8Qe1+ST1AnS7cD5TvhhmKba5quaIhsv8jAVTmUMYvsX40cZYV99hSUzSegJQjsVXg=
#
