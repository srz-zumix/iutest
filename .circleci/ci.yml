version: 2.1
aliases:
  - &branch-filter
    branches:
      only:
        - master
        - develop
        - /^feature.*/
        - /^fix.*/
        - /^circleci.*/
  - &default
    working_directory: ~/srz-zumix/iutest
    shell: /bin/bash --login
    docker:
      - image: cimg/base:stable
        environment:
          MAKE_OPTION: -j4 OUTPUTXML=1
          MAKE_TARGET: default
          MAKE_RUN_TARGET: test
          # MAKE_TARGET: all_tests
          # MAKE_RUN_TARGET: run_all_tests
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_TOKEN
  - &job-parameters
    artifacts-path:
      type: string
      default: /tmp/circleci-artifacts
    test-reports-path:
      type: string
      default: /tmp/circleci-test-results
    clang-version:
      type: string
      default: ""
    no_output_timeout:
      type: string
      default: "10m"
  - &restore_cache
      keys:
      # This branch if available
      - v2-dep-{{ .Branch }}-
      # Default branch if not
      - v2-dep-master-
      # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
      - v2-dep-
  - &setup-step
      name: SetUp
      command: |
        sudo apt-get -y --allow-unauthenticated update && \
        sudo apt-get install software-properties-common && \
        CLANG_VERSION="<< parameters.clang-version >>" ./.ci/linux/install-clang.sh && \
        ./.ci/linux/install-gcc.sh
  - &save_cache
      key: v2-dep-{{ .Branch }}-{{ epoch }}
      paths:
      # This is a broad list of cache paths to include many possible development environments
      # You can probably delete some of these entries
      - vendor/bundle
      - ~/virtualenvs
      - ~/.m2
      - ~/.ivy2
      - ~/.bundle
      - ~/.go_workspace
      - ~/.gradle
      - ~/.cache/bower
  - &check-version-step
      name: check compiler version
      working_directory: test
      command: |
        if [ "$CIRCLE_NODE_INDEX" == "0" ]; then
          make showcxxversion;
        fi
  - &dump-macros-step
      name: dump compiler macros
      working_directory: test
      command: |
        if [ "$CIRCLE_NODE_INDEX" == "0" ]; then
          make showcxxmacros;
        fi
  - &min-tests-and-spec-step
    name: minimum_tests and show feature / spec
    no_output_timeout: << parameters.no_output_timeout >>
    command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then make minimum_tests && ./minimum_tests --spec --feature; fi
    working_directory: test
  - &build-step
    name: build
    no_output_timeout: << parameters.no_output_timeout >>
    command: |
      make clean $MAKE_OPTION $MAKE_ADD_OPTION
      case $CIRCLE_NODE_INDEX in \
        0) make $MAKE_TARGET $MAKE_OPTION $MAKE_ADD_OPTION OPTIMIZE=-O2 ;; \
        1) make $MAKE_TARGET $MAKE_OPTION $MAKE_ADD_OPTION OPTIMIZE=-O3 ;; \
        2) make $MAKE_TARGET $MAKE_OPTION $MAKE_ADD_OPTION OPTIMIZE=-Os ;; \
        3) make $MAKE_TARGET $MAKE_OPTION $MAKE_ADD_OPTION OPTIMIZE=$FAST_OPTIMIZE ;; \
      esac
      cp *.json << parameters.artifacts-path >>/ 2>/dev/null || true
    working_directory: test
  - &test-step
    name: run test
    command: |
      make $MAKE_RUN_TARGET $MAKE_OPTION $MAKE_ADD_OPTION
    working_directory: test
  - &report-step
    name: report
    command: |
      make report
    working_directory: test
  - &move-result-step
    name: move result xml
    when: always
    command: |
      mkdir -p << parameters.test-reports-path >>/junit/$CIRCLE_NODE_INDEX;
      find . -type f -regex ".*/test/.*xml" -exec cp {} << parameters.test-reports-path >>/junit/$CIRCLE_NODE_INDEX \;;
  - &build-test-steps
    - checkout
    - run: mkdir -p << parameters.artifacts-path >> << parameters.test-reports-path >>
    - restore_cache: *restore_cache
    - run: *setup-step
    - save_cache: *save_cache
    # Test
    - run: *check-version-step
    - run: *dump-macros-step
    - run: *min-tests-and-spec-step
    - run: *build-step
    - run: *test-step
    - run: *report-step
    - run: *move-result-step
    # Teardown
    - store_test_results:
        path: << parameters.test-reports-path >>
    # Save artifacts
    - store_artifacts:
        path: << parameters.artifacts-path >>
    - store_artifacts:
        path: << parameters.test-reports-path >>
  - &container-build-test-steps
    - checkout
    - run: *check-version-step
    - run: *dump-macros-step
    - run: *min-tests-and-spec-step
    - run: *build-step
    - run: *test-step
    - run: *report-step
    - run: *move-result-step
    # Teardown
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results

parameters:
  build:
    type: boolean
    default: false

orbs:
  win: circleci/windows@2.2.0
  docker: circleci/docker@1.4.0

jobs:
  gcc_fanalzyer_test:
    machine:
      image: ubuntu-2004:202111-02
    parameters: *job-parameters
    environment:
      CXX: g++
      GCC_VERSION: "11"
      DEFS: "-fanalyzer -Wno-analyzer-possible-null-argument -Wno-analyzer-possible-null-dereference -Wno-analyzer-malloc-leak -Wno-analyzer-null-dereference"
      MAKE_ADD_OPTION: -j1
      # GGC_MIN_EXPAND: 0 # full gc は時間かかりすぎて無理っぽい
      GGC_MIN_EXPAND: 10
      GGC_MIN_HEAPSIZE: 32768
    steps: *build-test-steps
  gcc_optimize_test:
    parallelism: 4
    <<: *default
    parameters: *job-parameters
    environment:
      CXX: g++
      GCC_VERSION: "11"
      FAST_OPTIMIZE: -Og
      # FAST_OPTIMIZE: -Ofast # https://github.com/srz-zumix/iutest/issues/396
    steps: *build-test-steps
  clang_optimize_test:
    parallelism: 4
    <<: *default
    parameters: *job-parameters
    environment:
      CXX: clang++
      FAST_OPTIMIZE: -Ot
      MAKE_ADD_OPTION: CXXFLAGS=-ftime-trace
    steps: *build-test-steps
  arm:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: arm.medium
    parameters: *job-parameters
    environment:
      MAKE_OPTION: -j4 OUTPUTXML=1
      MAKE_TARGET: default
      MAKE_RUN_TARGET: test
    steps: *container-build-test-steps
  vcperf:
    executor: win/default
    environment:
      CMAKE_GENERATOR_NAME: "Visual Studio 16 2019"
      CMAKE: "C:/CMake/bin/cmake.exe"
    steps:
      - checkout
      - run:
          name: install
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-win64-x64.zip -OutFile $Env:HOMEPATH\cmake-3.16.4-win64-x64.zip
            Expand-Archive $Env:HOMEPATH\cmake-3.16.4-win64-x64.zip -DestinationPath "C:\"
            Rename-Item "C:\cmake-3.16.4-win64-x64" -NewName CMake
      - run:
          name: cmake
          shell: bash.exe
          command: |
            mkdir build && cd build && ${CMAKE} ../projects/cmake -G "${CMAKE_GENERATOR_NAME}" -A x64
      - run:
          name: vcperf
          shell: cmd.exe
          command: .circleci\vcperf_build.bat
      - store_artifacts:
          path: .\iutest.etl
  msvc_wine:
    machine: true
    steps:
      - checkout
      - docker/check:
          docker-username: DOCKERHUB_LOGIN   # DOCKER_LOGIN がデフォルト値となっており、この値が存在する場合自動で値がセットされます
          docker-password: DOCKERHUB_TOKEN   # DOCKER_PASSWORD がデフォルト値になっております
      # - run:
      #     name: login check
      #     command: |
      #       echo a | docker login
      - docker/pull:
          images: 'madduci/docker-wine-msvc:16.7-2019'
      - run:
          name: docker setup
          command: |
            docker run --rm -d -i --name iutest-work -w /home/wine/.wine/drive_c/ madduci/docker-wine-msvc:16.7-2019
            docker cp . iutest-work:/home/wine/.wine/drive_c/iutest_
            docker exec iutest-work wine64 cmd /C xcopy /Y /I /H /S /Q iutest_ iutest
      - run:
          name: test
          command: |
            docker exec iutest-work /home/wine/.wine/drive_c/iutest_/.ci/msvc-wine-entrypoint iutest/.ci/msvc-wine-build.bat
          no_output_timeout: 30m
      - run:
          name: docker teardown
          command: |
            docker stop iutest-work
  noop:
    machine: true
    steps:
      - run:
          name: halt
          command: circleci-agent step halt

workflows:
  version: 2.1
  default-test:
    when: << pipeline.parameters.build >>
    jobs:
      # - gcc_fanalzyer_test:
      #     filters: *branch-filter
      #     no_output_timeout: 360m
      - gcc_optimize_test:
          filters: *branch-filter
      - clang_optimize_test:
          filters: *branch-filter
          matrix:
              parameters:
                clang-version: ["10", "11"]
      - arm:
          filters: *branch-filter
      - vcperf:
          filters: *branch-filter
      - msvc_wine:
          filters: *branch-filter
  noop:
    when:
      not: << pipeline.parameters.build >>
    jobs:
      - noop


