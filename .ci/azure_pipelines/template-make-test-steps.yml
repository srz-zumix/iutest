# optional make test steps template

parameters:
  options: ''
  package_name: 'default'
  make_pullrequest: 'true'
  TESTRESULT_REPONAME: 'iutest-ci-results'
  TESTRESULT_BRANCHNAME: 'ci/azurepipelines/$(Agent.JobName)'
  TESTRESUTL_PR_BRANCHNAME: 'ci/azurepipelines/$(Agent.JobName)_$(Build.BuildId)'

steps:
- script: |
    ulimit -c unlimited && ulimit -a
    mkdir -p ~/.config/apport/
    echo [main] > ~/.config/apport/settings
    echo unpackaged=true >> ~/.config/apport/settings
    cat ~/.config/apport/settings
    sudo apt-get install language-pack-ja
    sudo update-locale LANG=ja_JP.UTF-8
    locale -a
  displayName: 'setup'
  condition: eq(variables['Agent.OS'], 'Linux')

- task: InstallSSHKey@0
  displayName: 'Install SSH Key'
  inputs:
    hostName: 'github.com'
    sshPublicKey: 'not required'
    sshKeySecureFile: 'id_azurepipelines_rsa'

- task: DownloadSecureFile@1
  inputs:
    secureFile: hub
  condition: ${{ parameters.make_pullrequest }}

- script: |
    sudo apt-get update
    sudo apt-get install -y rubygems
    sudo gem install hub
    hub --version
    cp $(Agent.TempDirectory)/hub ~/.config/hub
  displayName: 'Install Hub'
  condition: ${{ parameters.make_pullrequest }}

- script: |
    echo ${TestResultBranchName}
    make -C test showcxxversion
  displayName: 'versions'

- script: |
    echo "make -C test -j4 OUTPUTXML=junit ${{ parameters.options }}"
    make -C test -j4 OUTPUTXML=junit ${{ parameters.options }}
  displayName: 'make'

- script: |
    echo "make -C test OUTPUTXML=junit ${{ parameters.options }} test"
    make -C test OUTPUTXML=junit ${{ parameters.options }} test
  displayName: 'test'
  env:
    RUN_OPTION: --iutest_default_package_name=${{ parameters.package_name }} --iutest_locale_ctype=JPN

- script: |
    TEST_RESULTS=`find ./test -maxdepth 1 -name *.xml 2>/dev/null`
    if [ $? -ne 0 ] || [ -z "$TEST_RESULTS" ]; then echo "##vso[task.setvariable variable=SkipPushTestResult]true"; fi
  displayName: 'test.xml output check'
  condition: always()

- script: |
    ls /var/crash/
    mkdir test/coredump
    # for file in `find /var/crash/ -name '*.crash'`; do sudo cp $file test/coredump ; done
    for file in `find /var/crash/ -name '*.crash'`; do sudo sed -i -e "s/UserGroups:\s*$/UserGroups:iutest/g" $file ; done
    for file in `find /var/crash/ -name '*.crash'`; do apport-unpack $file test/coredump/`basename $file .crash` ; done
    (cd test/coredump && ls -Ra)
  displayName: 'core dump unpack'
  condition: failed()

- task: PublishPipelineArtifact@0
  condition: failed()
  inputs:
    artifactName: 'core dump'
    targetPath: 'test/coredump'

- task: CopyFiles@2
  condition: always()
  inputs:
    contents: 'test/*.xml'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishPipelineArtifact@0
  condition: always()
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: "test result $(Agent.JobName)"

- task: PublishTestResults@2
  inputs:
    testResultsFiles: 'test/*.xml'

- script: |
    export LANG=ja_JP.UTF-8
    ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    git clone git@github.com:srz-zumix/${{ parameters.TESTRESULT_REPONAME }}.git ../${{ parameters.TESTRESULT_REPONAME }} 2>/dev/null
    cd ../${{ parameters.TESTRESULT_REPONAME }}
    git config user.email "zumix.cpp@gmail.com"
    git config user.name "srz-zumix (Azure Pipelines)"
    git fetch -p --all
    git checkout -b ${{ parameters.TESTRESULT_BRANCHNAME }} origin/${{ parameters.TESTRESULT_BRANCHNAME }} || git checkout -b ${{ parameters.TESTRESULT_BRANCHNAME }}
    git merge origin/master
  condition: and(always(), ne(variables['SkipPushTestResult'], 'true'))
  displayName: 'setup testresult repository'

- script: |
    set -e
    find ./test -name '*.xml' | xargs python ./tools/xml2file/xml2file.py --encoding utf-8 --clean --verbose 1 -o ../${{ parameters.TESTRESULT_REPONAME }}/azure-pipelines/${AGENT_JOBNAME}/
    # find ./azure-pipelines -type f -printf "%T@ %p\n" | sort -nr | cut -d\  -f2-
    cd ../${{ parameters.TESTRESULT_REPONAME }}
    git add --all
    echo "${BUILD_SOURCEBRANCHNAME}: ${BUILD_SOURCEVERSION}: ${BUILD_SOURCEVERSIONMESSAGE}" > message.txt
    echo >> message.txt
    echo "${BUILD_BUILDURI}" >> message.txt
    git commit -q -F message.txt
    git push -u origin ${{ parameters.TESTRESULT_BRANCHNAME }}
  condition: and(always(), ne(variables['SkipPushTestResult'], 'true'))
  displayName: 'xml2file push to github'

- script: |
    set -e
    cd ../${{ parameters.TESTRESULT_REPONAME }}
    git checkout -b ${{ parameters.TESTRESUTL_PR_BRANCHNAME }}
    git push -u origin ${{ parameters.TESTRESUTL_PR_BRANCHNAME }}
    ${{ if parameters.make_pullrequest }}
      echo "Azure Pipelines ${AGENT_JOBNAME} ${BUILD_BUILDID}" > pr.txt
      echo >> pr.txt
      echo >> pr.txt
      cat message.txt >> pr.txt
      hub pull-request -F pr.txt -b all
      rm pr.txt
    rm message.txt
  condition: and(always(), ne(variables['SkipPushTestResult'], 'true'))
  displayName: 'xml2file create pullrequest'

- script: |
    cd ../${{ parameters.TESTRESULT_REPONAME }}
    ./merge.sh -d ${{ parameters.TESTRESUTL_PR_BRANCHNAME }}
  condition: and(always(), ne(variables['SkipPushTestResult'], 'true'))
  displayName: 'try merge'
