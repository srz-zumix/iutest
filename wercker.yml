box: python
build:
  steps:
    - pip-install: &pip-install
        requirements_file: ""
        packages_list: "requests"

    # # This pip-install clears the local wheel cache
    # - pip-install:
    #     clean_wheel_dir: true

    - script:
        name: echo python information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"

    - script:
        name: listup compiler
        code: |
          cd tools/wandbox
          python iuwandbox.py --list-compiler --verbose

gtest-compat:
  box: alpine
  docker: true
  steps:
    - script:
        name: Install docker
        code: apk --no-cache add docker
    - script:
        name: Launch docker container
        # https://devcenter.wercker.com/development/pipelines/direct-docker-access/#volumes-and-mounts
        code: |
          docker run --rm -d -i --name iutest-work -w /iutest ${DOCKER_IMAGE} bash
          docker cp . iutest-work:/iutest
    - script:
        name: Use GTest
        code: |
          docker exec iutest-work \
            make -C test USE_GTEST=1 \
            GTEST_EXPECT_VER=${GTEST_EXPECT_VERSION} GTEST_EXPECT_LATEST=${GTEST_EXPECT_LATEST} clean ${MAKE_TARGET}
    - script:
        name: Use GMock
        code: |
          docker exec iutest-work \
            make -C test USE_GTEST=1 USE_GMOCK=1 \
            GTEST_EXPECT_VER=${GTEST_EXPECT_VERSION} GTEST_EXPECT_LATEST=${GTEST_EXPECT_LATEST} clean ${MAKE_TARGET}
    - script:
      name: Clean docker container
      code: |
        docker stop iutest-work

wandbox:
  steps:
    - pip-install: *pip-install
    - script: &make-fused
        name: make fused
        code: |
          make -C tools/fused

    - script: &setup
        name: setup
        code: |
          export PYTHONDONTWRITEBYTECODE=1
          export IUWANDBOX_COMMANDLINE_OPTION="-f"-Werror" --encoding utf-8-sig --expand-include --verbose --check-config --retry-wait 180 --iutest-use-main"
          if [ "${IUWANDBOX_TARGET_SRC+x}" ]; then export IUWANDBOX_TARGET_SRC="../../test/syntax_tests.cpp"; fi

    - script: &experimental
        name: experimental setup
        code: |
          export IUWANDBOX_EXPERIMENTAL_OPTION="--iutest-use-wandbox-min"

    - script: &cpp
        name: c++
        code: |
          cd tools/wandbox
          for compiler in ${IUWANDBOX_COMPILER}
          do
              python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler --std "c++${IUWANDBOX_CPPVER}" ${IUWANDBOX_TARGET_SRC} ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
          done

    # - script: &gnucpp
    #     name: gnuc++
    #     code: |
    #       cd tools/wandbox
    #       for compiler in ${IUWANDBOX_COMPILER}
    #       do
    #           python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler --std "gnu++${IUWANDBOX_CPPVER}" ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
    #       done

wandbox-no-experimental:
  steps:
    - pip-install: *pip-install
    - script: *make-fused
    - script: *setup
    - script: *cpp
    # - script: *gnucpp

wandbox-all-compiler:
  steps:
    - pip-install: *pip-install
    - script: *make-fused
    - script: *setup
    - script: *experimental
    - script:
        name: all-compiler
        code: |
          cd tools/wandbox
          for compiler in $(shell python iuwandbox.py --list-compiler)
          do
              python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
          done

nothing:
  steps:
    - script:
        name: echo
        code: echo "nothing to do"
