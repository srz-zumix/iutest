# This references the default Python container from
# the Docker Hub with the 2.7 tag:
# https://registry.hub.docker.com/_/python/
# If you want to use a slim Python container with
# version 3.4.3 you would use: python:3.4-slim
# If you want Google's container you would reference google/python
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: python
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # A step that executes `pip install` command.
    - pip-install: &pip-install
        requirements_file: ""
        packages_list: "requests"

    # # This pip-install clears the local wheel cache
    # - pip-install:
    #     clean_wheel_dir: true

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo python information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"

    - script:
        name: listup compiler
        code: |
          cd tools/wandbox
          python iuwandbox.py --list-compiler --verbose

wandbox:
  steps:
    - pip-install: *pip-install
    - script: &make-fused
        name: make fused
        code: |
          make -C tools/fused

    - script: &setup
        name: setup
        code: |
          export PYTHONDONTWRITEBYTECODE=1
          export IUWANDBOX_COMMANDLINE_OPTION="../../test/syntax_tests.cpp -f"-DIUTEST_USE_MAIN=1" -f"-Werror" --encoding utf-8-sig --expand-include --verbose --check-config --retry-wait 180"

    - script: &experimental
        name: experimental setup
        code: |
          export IUWANDBOX_EXPERIMENTAL_OPTION="--iutest-use-wandbox-min"

    - script: &cpp
        name: c++
        code: |
          cd tools/wandbox
          for compiler in ${IUWANDBOX_COMPILER}
          do
              python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler --std "c++${IUWANDBOX_CPPVER}" ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
          done

    - script: &gnucpp
        name: gnuc++
        code: |
          cd tools/wandbox
          for compiler in ${IUWANDBOX_COMPILER}
          do
              python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler --std "gnu++${IUWANDBOX_CPPVER}" ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
          done

wandbox-no-experimental:
  steps:
    - pip-install: *pip-install
    - script: *make-fused
    - script: *setup
    - script: *cpp
    - script: *gnucpp

wandbox-all-compiler:
  steps:
    - pip-install: *pip-install
    - script: *make-fused
    - script: *setup
    - script: *experimental
    - script:
        name: all-compiler
        code: |
          cd tools/wandbox
          for compiler in $(shell python iuwandbox.py --list-compiler)
          do
              python ./iuwandbox.py ${IUWANDBOX_EXPERIMENTAL_OPTION} ${IUWANDBOX_COMMANDLINE_OPTION} -c $compiler ${IUWANDBOX_ADD_OPTION} ${IUWANDBOX_STDC_ADD_OPTION};
          done

nothing:
  steps:
    - script:
        name: echo
        code: echo "nothing to do"
